{"version":3,"file":"static/js/484.2c3c60e8.chunk.js","mappings":"oQAiCMA,EAAkB,WACtB,MAAO,CACLC,KAAMC,EAAAA,KAGJC,EAAkB,SAACC,GACvB,MAAO,CACLH,KAAMC,EAAAA,GACNG,QAASD,IAGPE,EAAiB,SAACC,GACtB,MAAO,CACLN,KAAMC,EAAAA,GACNG,QAASE,I,mBCxCE,SAASC,EAAUC,GAChC,OAAwBC,EAAAA,EAAAA,UAAS,CAC/BC,MAAO,GACPC,SAAU,KAFZ,eAAOC,EAAP,KAAaC,EAAb,KAKMC,GAAUC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAAiBH,WACtDR,GAAQS,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAAiBX,SAEpDY,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLF,EDgCG,CACLlB,KAAMC,EAAAA,QC/BL,IAEH,IAKMoB,EAAiB,SAAAC,GACrBT,GAAQ,kBAAKD,GAAN,cAAaU,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAU/C,OAAIC,aAAaC,QAAQ,aAChB,SAAC,EAAAC,SAAD,CAAUC,GAAG,OAGpB,gBAAKC,UAAU,YAAf,UACE,gBAAKA,UAAU,WAAf,UACE,iBAAKA,UAAU,mBAAf,WACE,eAAIA,UAAU,cAAd,oBACA,kBAAMC,SAxBO,SAAAT,GDrBC,IAACU,EAAUC,ECsB/BX,EAAEY,iBACFhB,GDvBqBc,ECuBHpB,EDvBaqB,ECuBPzB,EAAMyB,QDtBzB,SAACf,GACNA,EAASnB,KAEToC,EAAAA,EAAAA,KAAS,mBAAoBH,GAC1BI,MAAK,SAAAC,GACJ,GAA8B,WAA1BA,EAAOlC,KAAKmC,KAAKC,KACnBrB,EAAShB,EAAgBmC,EAAOlC,OAChCuB,aAAac,QAAQ,WAAYC,KAAKC,UAAUL,EAAOlC,OACvD8B,EAAQU,aACH,IAA6B,SAAzBN,EAAOlC,KAAKmC,KAAKC,KAK1B,OAAOK,QAAQC,OAAO,CACpBC,SAAU,CACR3C,KAAM,CACJ4C,QAAS,0CAPf7B,EAAShB,EAAgBmC,EAAOlC,OAChCuB,aAAac,QAAQ,WAAYC,KAAKC,UAAUL,EAAOlC,OACvD8B,EAAQe,QAAQ,yBAWnBC,OAAM,SAAA3C,GACLY,EAASb,EAAeC,WCoBtB,WACE,iBAAKwB,UAAU,aAAf,WACE,sCACA,kBAAO9B,KAAK,OAAO8B,UAAU,eAAeN,KAAK,QAAQ0B,SAAU7B,QAErE,iBAAKS,UAAU,aAAf,WACE,yCACA,kBAAO9B,KAAK,WAAW8B,UAAU,eAAeN,KAAK,WAAW2B,aAAa,KAAKD,SAAU7B,QAE9F,gBAAKS,UAAU,cAAf,UACE,mBAAQ9B,KAAK,SAAS8B,UAAU,kBAAhC,sBAEF,iBAAKA,UAAU,mBAAf,WACE,SAAC,KAAD,CAAMD,GAAG,UAAUC,UAAU,MAA7B,sBACA,SAAC,KAAD,CAAMD,GAAG,IAAIC,UAAU,MAAvB,qCAGJ,iBAAKA,UAAU,cAAf,WACE,qCACA,oEACA,6DAlCJhB,GACK,SAACsC,EAAA,EAAD,IAEF9C,IAAS,gBAAKwB,UAAU,0BAAf,SAA0CxB","sources":["containers/AdminTemplate/LoginPage/modules/actions.js","containers/AdminTemplate/LoginPage/index.js"],"sourcesContent":["import api from 'utils/apiUtils';\r\nimport * as ActionType from './constants';\r\n\r\nexport const actLogin = (userInfo, history) => {\r\n  return (dispatch) => {\r\n    dispatch(actLoginRequest());\r\n\r\n    api.post(\"/api/auth/signin\", userInfo)\r\n      .then(result => {\r\n        if (result.data.user.role === \"CLIENT\") {\r\n          dispatch(actLoginSuccess(result.data));\r\n          localStorage.setItem(\"UserInfo\", JSON.stringify(result.data));\r\n          history.goBack();\r\n        } else if (result.data.user.role == \"ADMIN\") {\r\n          dispatch(actLoginSuccess(result.data));\r\n          localStorage.setItem(\"UserInfo\", JSON.stringify(result.data));\r\n          history.replace(\"/users-management\");\r\n        } else {\r\n          return Promise.reject({\r\n            response: {\r\n              data: {\r\n                message: \"Does not have permission to access!\"\r\n              }\r\n            }\r\n          });\r\n        }\r\n      })\r\n      .catch(error => {\r\n        dispatch(actLoginFailed(error));\r\n      });\r\n  }\r\n}\r\n\r\nconst actLoginRequest = () => {\r\n  return {\r\n    type: ActionType.LOGIN_REQUEST,\r\n  }\r\n};\r\nconst actLoginSuccess = (data) => {\r\n  return {\r\n    type: ActionType.LOGIN_SUCCESS,\r\n    payload: data\r\n  }\r\n};\r\nconst actLoginFailed = (error) => {\r\n  return {\r\n    type: ActionType.LOGIN_FAILED,\r\n    payload: error\r\n  }\r\n};\r\n\r\nexport const actLoginReset = () => {\r\n  return {\r\n    type: ActionType.LOGIN_RESET\r\n  }\r\n}","import Loading from 'components/Loading';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { actLogin, actLoginReset } from './modules/actions';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport default function LoginPage(props) {\r\n  const [info, setInfo] = useState({\r\n    email: \"\",\r\n    password: \"\"\r\n  });\r\n\r\n  const loading = useSelector(state => state.userLoginReducer.loading);\r\n  const error = useSelector(state => state.userLoginReducer.error);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(actLoginReset());\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(actLogin(info, props.history));\r\n  };\r\n\r\n  const handleOnChange = e => {\r\n    setInfo({ ...info, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const notifications = () => {\r\n    if (loading) {\r\n      return <Loading />\r\n    }\r\n    return error && <div className='alert alert-danger mt-3'>{error}</div>\r\n  }\r\n\r\n  if (localStorage.getItem(\"UserInfo\")) {\r\n    return <Redirect to=\"/\"></Redirect>\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row py-3\">\r\n        <div className=\"col-md-5 mx-auto\">\r\n          <h4 className='text-center'>Login</h4>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"form-group\">\r\n              <label>Email</label>\r\n              <input type=\"text\" className=\"form-control\" name=\"email\" onChange={handleOnChange} />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label>Password</label>\r\n              <input type=\"password\" className=\"form-control\" name=\"password\" autoComplete=\"on\" onChange={handleOnChange} />\r\n            </div>\r\n            <div className='text-center'>\r\n              <button type=\"submit\" className=\"btn btn-primary\">Login</button>\r\n            </div>\r\n            <div className='text-center mt-3'>\r\n              <Link to=\"/signup\" className='p-3'>Sign Up</Link>\r\n              <Link to=\"/\" className='p-3'>Back to Homepage</Link>\r\n            </div>\r\n          </form>\r\n          <div className='font-italic'>\r\n            <p>Example:</p>\r\n            <p>(Client): huynhanh.mtu@gmail.com - 1111</p>\r\n            <p>(Admin): dinh@gmail.com - 1111</p>\r\n          </div>\r\n          {notifications()}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}"],"names":["actLoginRequest","type","ActionType","actLoginSuccess","data","payload","actLoginFailed","error","LoginPage","props","useState","email","password","info","setInfo","loading","useSelector","state","userLoginReducer","dispatch","useDispatch","useEffect","handleOnChange","e","target","name","value","localStorage","getItem","Redirect","to","className","onSubmit","userInfo","history","preventDefault","api","then","result","user","role","setItem","JSON","stringify","goBack","Promise","reject","response","message","replace","catch","onChange","autoComplete","Loading"],"sourceRoot":""}